package com.testoop5;
/*
 * 数组存储若干同类型数据的集合，创建一个数组，其实就是在内存中开辟一个连续的空间，
 * 最低地址对应数组的第一个元素，最高地址对应数组的最后一个元素
 * 数组的要素:
 * 1:数组名，通过数组名访问数组元素
 * 2，数组元素，数组中存放的数据
 * 3，数组下标，数组下标从0开始，到数组长度-1；
 * 4，元素类型，数组中存放的数据的类型
 * 使用数组；
 * 
 * 注意事项；
 * 1  数组需要先声明，初始化，然后才能使用
 * 数组声明: 数据类型[] 数组名；
 * 数组的初始化:
 * 		静态初始化:数组名=new 数据类型[]{值1，值2，值3，~值n}
 * 		动态初始化:数组名=new 数据类型[10];
 * 
 * 静态初始化和动态初始化的区别
 *静态初始化在初始化的时候没有指定数组 的长度，而是有元素个数决定其长度
 *动态初始化在初始化的时候指定了数组的长度
 *
 *数组和声明合并
 *数据类型[] 数组名= new 数组类型[]{值}
 *数据类型[] 数组名 = new 数组类型[数组长度]
 *2,数组本身也是一种类型，叫应用类型
 */
public class TestArray1 {
	public static void main(String[] args) {
		//静态初始化
		int[] a1=new int[]{10,20,30};
		//动态初始化
		char[] c1=new char[10];
		//对数组赋值:数组名[]下标=值
		c1[0]='s';
		c1[1]='a';
		//动态初始化时系统对指定元素类型的数组进行初始化
		//对于byte,short,long,int 元素类型的数组，默认值为0
		//float,double,默认为0.0
	    //char默认为' ';
		//boolean默认为false;
		
		byte[] b1=new byte[5];
		//获取数组元素；数组名[下标]
		System.out.println(b1[0]);
		System.out.println(c1[0]);
		
		//获取数组长度:数组名.length;
		System.out.println("数组长度"+b1.length);
		
		//使用循环便利数组,查看
		for(int i=0;i<a1.length;i++){
			System.out.println(a1[i]);
		}
	}
}
